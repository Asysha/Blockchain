#include <stdio.h>
#include <time.h>
#include <stdlib.h>
#include <string.h>
#include "sha256.h"
#include "sha256_utils.h"

#define diff 4
#define max_nb_trans 10
#define max_nb_bloc 10
#define max_nb_users 10


//Strucuture générale d'un bloc
struct Bloc{
    int indice, nb_trans, nonce;
    char prev_hash[SHA256_BLOCK_SIZE*2 + 1], hash_root[SHA256_BLOCK_SIZE*2 + 1], curr_hash[SHA256_BLOCK_SIZE*2 + 1];
    char timestamp[26];
    char liste[max_nb_trans][50];
};

//Recuperer l'heure a l'instant
char * getTimeStamp() {
  time_t ltime;
  time(&ltime);
  return ctime(&ltime);
}

//pour appeler le sha56 : void sha256ofString(BYTE * str,char hashRes[SHA256_BLOCK_SIZE*2 + 1])


void mTree(char hashRes[SHA256_BLOCK_SIZE*2 + 1], char liste[max_nb_trans][50], int nb_trans) {
  //Initialisation :
  char hashRes1[SHA256_BLOCK_SIZE*4 + 1];
  char hashRes2[SHA256_BLOCK_SIZE*2 + 1];
  int taille = nb_trans;
  char** listeRes = NULL;
  //Liste de taille variable
  listeRes = malloc(nb_trans*sizeof(char*));
  //Verification de l'allocation
  if(listeRes == NULL) {
    perror("erreur d'allocation");
  }
  //Copie de la liste dans la liste dynamique
  for (int i = 0; i < nb_trans; i++) {
    listeRes[i] = malloc(sizeof(char) * (SHA256_BLOCK_SIZE * 2 + 1));
  	strcpy(listeRes[i], liste[i]);
  }
  int indice;
  //Boucle réalisant l'arbre de merkle
  while (taille > 1) {

    indice = 0;
    for (int co = 0; co < taille; co += 2) { 
      sha256ofString((BYTE *)listeRes[co], hashRes1);
      //Si dernier, liste taille impaire donc else, dedoublement du solitaire
      if (co < taille -1) {
        sha256ofString((BYTE *)listeRes[co+1], hashRes2);
        strcat(hashRes1, hashRes2);
      }
      else {
          char hashResTmp[SHA256_BLOCK_SIZE * 4 + 1];
          strcpy(hashResTmp, hashRes1);
          strcat(hashRes1, hashResTmp);
      }
      //On calcule le hash des deux hash concaténés, et on l'inscrit dans la liste
      sha256ofString((BYTE *)hashRes1, listeRes[indice]);
      indice++;
    }
    //Si impair, on ajoute 1 car on debouble le solitaire
    if (taille%2 == 0) {
      taille = taille/2;
    }
    else {
      taille = (taille+ 1)/2;
    }
  }
  //Sauvegarde du resultat
  strcpy(hashRes, listeRes[0]);

  // On free pour éviter les fuites de mémoire
  for (int i = 0; i < nb_trans; ++i)
      free(listeRes[i]);
  free(listeRes);
}

//Generer liste de transactions aleatoire
void generate_trans(char liste[max_nb_trans][50], int nb_trans) {
  //modele : "Source usern-Destination : userm $$$$$$$$" soit environ 50caracteres
  //Liste des possible clients de la banques, 20 max car 10 transactions max
  char* liste_user[20] = {"Damien", "Thomas", "Solene", "Lola", "Antonin", "Valentin", "Alicia", "Pauline", "Remi", "Alexis", "Alexia", "Romane", "Morgan", "Axelle", "Sarah", "Alban", "Paul", "Candice", "Louise", "Papion" };
  //1 Bnb = 10^8 satoBnb
  long int montant_s;
  //Pour aleatoire
  srand(time(NULL));
  //Boucle de remplissage de la liste
  for (int co = 0 ; co<nb_trans ; co++) {
    char transaction[56];
    //100*10^8 car MAX_VALUE + conversion en satoBnB
    montant_s = rand()%1000000000+1;
    //Generation de deux users aleatoirement
    int indice_usern = rand()%20;
    int indice_userm = rand()%20;
    //Verification que les deux utilisateurs sont differents
    while(indice_usern == indice_userm) {
      indice_userm = rand()%20;
    }
    //Construction de la chaine de caractere suivant le modele
    sprintf(transaction,"Source %s-Destination %s %ld", liste_user[indice_usern], liste_user[indice_userm], montant_s);
    //Inscription dans la liste
    memcpy(liste[co], transaction, 56);
  }
}

//Initialisation d'un bloc
void initBloc(struct Bloc blockchain[max_nb_bloc], int nbBloc){
  srand(time(NULL));
  //Initialisation bloc
  struct Bloc bloc;
  //Initialisation timestamp
  *bloc.timestamp = *getTimeStamp(); // renvoie chaine type  "Fri Jan 19 13 :40 :09 2018"
  //Initilisation de prev_hash, nb_transaction, liste (la liste de transactions)
  if (nbBloc == 0) { //si bloc genesis
    strcpy(bloc.prev_hash,  "000000000000000000000000000000000\0");
    bloc.nb_trans = 0;
    strcpy(bloc.liste[0],  "Genesis");
    //hash root du bloc genensis ??
  }
  else {
    strcpy(bloc.prev_hash, blockchain[nbBloc-1].curr_hash);
    bloc.nb_trans = rand()%10+1;
    generate_trans(bloc.liste, bloc.nb_trans);
    mTree(bloc.hash_root, bloc.liste, bloc.nb_trans); 
  }
  //Initialisation nonce et indice
  bloc.nonce = 0;
  bloc.indice = nbBloc;
  //Calcul du hash du bloc

  //Ajout du bloc a la blockchain
  blockchain[nbBloc] = bloc;
}
